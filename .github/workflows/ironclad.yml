name: Ironclad CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  lint-type:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with: { node-version: '20' }
      - run: npm ci
      - run: npm run lint
      - run: npm run typecheck

  unit-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with: { node-version: '20' }
      - run: npm ci
      - run: npm test -- --ci --reporters=default --reporters=jest-junit

  api-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install Python test deps
        run: |
          python -m pip install --upgrade pip
          pip install -r api/requirements-test.txt
      - name: Run API unit tests
        env:
          PYTHONPATH: .
        run: pytest -q api/tests/unit

  data-validation:
    name: Data Validation (Pandera) — flag gated
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install validation deps (pandas + pandera)
        run: |
          python -m pip install --upgrade pip
          pip install pandas pandera
      - name: Run Pandera validations (flag-gated)
        env:
          # Toggle via repository variable/secret: set vars.FLAG_DATA_VALIDATION to 'on' to enable
          FLAG_DATA_VALIDATION: ${{ vars.FLAG_DATA_VALIDATION || 'off' }}
        run: |
          python -m api.validations.pandera.run_all --json-out validation/pandera-summary.json
      - name: Upload validation summary
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pandera-validation-summary
          path: validation/pandera-summary.json

  api-heavy-tests:
    if: ${{ vars.RUN_HEAVY_TESTS == 'on' }}
    name: API Heavy Tests (unit+integration) — optional
    runs-on: ubuntu-latest
    services:
      etcd:
        image: bitnami/etcd:3.5
        ports:
          - 2379:2379
        env:
          ETCD_ENABLE_V2: "true"
          ALLOW_NONE_AUTHENTICATION: "yes"
          ETCD_ADVERTISE_CLIENT_URLS: "http://etcd:2379"
          ETCD_LISTEN_CLIENT_URLS: "http://0.0.0.0:2379"
      minio:
        image: minio/minio:latest
        ports:
          - 9000:9000
          - 9001:9001
        env:
          MINIO_ROOT_USER: "minioadmin"
          MINIO_ROOT_PASSWORD: "minioadmin"
        options: >-
          --health-interval 5s --health-timeout 5s --health-retries 20
        command: server /data --console-address :9001
      milvus:
        image: milvusdb/milvus:v2.4.0
        ports:
          - 19530:19530
        env:
          ETCD_ENDPOINTS: etcd:2379
          MINIO_ADDRESS: minio:9000
          MILVUS_LOG_LEVEL: warn
        options: >-
          --health-interval 5s --health-timeout 5s --health-retries 90
        command: ["milvus", "run", "standalone"]
    strategy:
      matrix:
        python-version: ['3.10', '3.11']
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install heavy Python deps (requirements.txt)
        run: |
          python -m pip install --upgrade pip
          pip install -r api/requirements.txt
      - name: Run API unit tests (heavy)
        env:
          PYTHONPATH: .
        run: pytest -q api/tests/unit
      - name: Wait for Milvus readiness (19530)
        run: |
          echo "Waiting for Milvus on 127.0.0.1:19530..."
          for i in $(seq 1 120); do
            python - <<'PY'
import socket, sys
s=socket.socket(); s.settimeout(1.0)
try:
  s.connect(("127.0.0.1",19530)); sys.exit(0)
except Exception:
  sys.exit(1)
PY
            if [ $? -eq 0 ]; then echo "Milvus is up"; break; fi
            sleep 2
          done
          python - <<'PY'
import socket, sys
s=socket.socket(); s.settimeout(1.0)
try:
  s.connect(("127.0.0.1",19530)); sys.exit(0)
except Exception:
  print("Milvus not reachable in time"); sys.exit(1)
PY
      - name: Run API integration tests (heavy)
        env:
          PYTHONPATH: .
          RUN_MILVUS_INTEGRATION: on
          FLAG_HEAVY_DEPS: on
        run: pytest -q api/tests/integration

  coverage-gate:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with: { node-version: '20' }
      - run: npm ci
      - run: npm run test:coverage
      - name: Enforce coverage 85/70
        run: node ./scripts/enforce-coverage.js --lines 85 --branches 70

  security:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Secret scan
        uses: trufflesecurity/trufflehog@main
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  licenses-sbom:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with: { node-version: '20' }
      - run: npm ci
      - name: Generate SBOM
        run: npx @cyclonedx/cyclonedx-npm --output-file sbom.json
      - name: Scan licenses
        run: npx license-checker --summary --production

  web-a11y-perf:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with: { node-version: '20' }
      - run: npm ci
      - run: npm run build
      - run: npm run start & npx wait-on http://localhost:3000
      - name: Lighthouse CI
        run: npx @lhci/cli@0.13.x autorun
      - name: Accessibility (axe-core via Puppeteer)
        run: node scripts/axe-check.js

  perf-k6:
    runs-on: ubuntu-latest
    env:
      BASE_URL: http://localhost:3000
      K6_SUMMARY_EXPORT: k6-summary.json
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with: { node-version: '20' }
      - run: npm ci && npm run build
      - run: npm run start & npx wait-on http://localhost:3000/api/health
      - name: Run k6
        uses: grafana/k6-action@v0.3.1
        with:
          filename: perf/api-smoke.js
      - name: Enforce p95 budget (<=300ms)
        run: node ./scripts/assert-k6-p95.js --max 300 --summary k6-summary.json

  e2e-smoke:
    runs-on: ubuntu-latest
    needs: [lint-type, unit-tests, api-tests, data-validation, security]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with: { node-version: '20' }
      - run: npm ci
      - run: npm run build
      - run: npx playwright install --with-deps
      - run: npm run start & npx wait-on http://localhost:3000
      - run: npm run e2e:smoke

  iac-validate:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - run: npm i -g vercel
      - run: vercel --version
      - run: vercel inspect || echo "Skip inspect without project linking"

  audit-trail:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Generate audit JSON
        run: node scripts/generate-audit.js
      - uses: actions/upload-artifact@v4
        with:
          name: audit-json
          path: audit.json
